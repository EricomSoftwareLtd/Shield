version: "3.3"

# Ericom Shield Stack Description
# YML file for Rel-19.01

services:
    dns:
        image: 'securebrowsing/shield-dns:latest'
        networks:
            - shield
        deploy:
            replicas: 2
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.management==yes]}
            update_config: {failure_action: rollback}
            resources: {limits: {memory: 1GB, cpus: '1.5'}}
        environment:
            - 'TZ=UTC'
            - 'LOGSTASH_FIELDS=service=dns'
            - 'UPSTREAM_DNS_SERVERS=${UPSTREAM_DNS_SERVERS}'
    netdata:
        image: 'securebrowsing/netdata:latest'
        volumes:
            - '/proc:/host/proc:ro'
            - '/sys:/host/sys:ro'
        networks:
            - shield
        ports:
            - {target: 19999, published: 8383, protocol: tcp}
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            resources: {limits: {cpus: '0.20', memory: 256M}}
# netdata will not be deployed by default (need to add label:netdata):            
            placement: {constraints: [node.labels.netdata==yes]}
        environment:
            - 'TZ=UTC'
    maintenance:
        image: 'securebrowsing/shield-maintenance:latest'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        networks:
            - shield
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            resources: {limits: {memory: 1GB, cpus: '0.5'}}
        environment:
            - 'TZ=UTC'
            - 'IMAGE_CLEAN_INTERVAL=1h'
            - 'RUN_TIME=23:59'
            - 'LOGSTASH_FIELDS=service=maintenance'
    collector:
        image: 'securebrowsing/shield-collector:latest'
        networks:
            - shield
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/dev:/hostdev'
        hostname: '{{.Node.ID}}-{{.Service.Name}}'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=collector'
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            resources: {limits: {memory: 1GB, cpus: '0.5'}}
    elk:
        image: 'securebrowsing/shield-elk:latest'
        networks:
            - shield
        environment:
            - 'TZ=UTC'
            - 'REINDEX_RUNINNG_INTERVAL=30s'
            - 'CLEAN_RUNINNG_INTERVAL=12h'
            - 'LOGSPOUT=ignore'
            - 'HEAP_SIZE=2g'
        deploy:
            replicas: 1
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.management==yes]}
            update_config: {failure_action: rollback}
            resources: {limits: {memory: 4GB, cpus: '2'}}
        logging:
            options:
               max-size: "500M"
               max-file: "3"
        volumes:
            - 'elastic:/opt/elasticsearch/data'
    logspout:
        image: 'securebrowsing/shield-logspout:latest'
        networks:
            - shield
        volumes:
            - '/etc/hostname:/etc/host_hostname:ro'
            - '/var/run/docker.sock:/var/run/docker.sock'
        environment:
            - 'TZ=UTC'
            - 'ROUTE_URIS=logstash+tcp://elk:5025'
            - 'RETRY_STARTUP=true'
            #- "DEBUG=1"
        deploy:
            mode: global
            resources: {limits: {cpus: '0.20', memory: 256M}}
    consul-server:
        image: 'securebrowsing/shield-configuration:latest'
        networks:
            - shield
        deploy:
            mode: replicated   #single node
            replicas: 5        #single node
            #mode: global      #multi node
            endpoint_mode: dnsrr
            placement: {constraints: [node.labels.management==yes]}
            update_config: {parallelism: 1, failure_action: rollback, delay: 100s}
            restart_policy: {condition: any}
            resources: {limits: {memory: 1GB, cpus: '1'}}
        environment:
            - 'TZ=UTC'
            - "SHIELD_SUBNET=${SUB_NET}"
            - 'NUMBER_OF_EXPECTED=3' # works for single and multi node
            - 'LOGSTASH_FIELDS=service=consulserver'
        volumes:
            - {type: bind, source: /usr/local/ericomshield/backup, target: /consul/backup}
    consul:
        image: 'securebrowsing/shield-consul-agent:latest'
        networks:
            - shield
        #Published only for Dev
#        ports:
#            - '8500:8500'
        deploy:
            mode: replicated
            replicas: 1
            update_config: {parallelism: 1, failure_action: rollback}
            restart_policy: {condition: any}
            resources: {limits: {memory: 2GB, cpus: '2'}}
        environment:
            - 'TZ=UTC'
            # eth2 for Dev
            - "SHIELD_SUBNET=${SUB_NET}"
            - 'RUN_AGENT=yes'
            - 'LOGSTASH_FIELDS=service=consulclient'

  netdata:
    image: securebrowsing/netdata:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - shield
    hostname: netdata
    ports:
      - target: 19999
        published: 8383
        protocol: tcp
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    deploy:
      mode: global
      restart_policy:
          condition: any
      update_config:
          failure_action: rollback
      resources:
        limits:
          cpus: '0.20'
          memory: 256M

  maintenance:
    image: securebrowsing/shield-maintenance:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - shield
    hostname: maintenance
    deploy:
      mode: global
      restart_policy:
          condition: any
      update_config:
          failure_action: rollback
      resources:
        limits:
          memory: 2GB
          cpus: "1"
    environment:
      - "IMAGE_CLEAN_INTERVAL=1m"
      - "LOGSTASH_FIELDS=service=maintenance"

  collector:
    image: securebrowsing/shield-collector:latest
    networks:
      - shield
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    hostname: "{{.Node.ID}}-{{.Service.Name}}"
    environment:
            - NODE_ENV=production
            - "LOGSTASH_FIELDS=service=collector"
    deploy:
      mode: global
      restart_policy:
          condition: any
      update_config:
          failure_action: rollback
  elk:
    image: securebrowsing/shield-elk:latest
#    ports:
#        - 5601:5601
#        - 9200:9200
#        - 5014:5014
    networks:
         - shield
    environment:
       - "REINDEX_RUNINNG_INTERVAL=30s"
       - "CLEAN_RUNINNG_INTERVAL=12h"
       - "LOGSPOUT=ignore"
       - "HEAP_SIZE=2g"
    deploy:
       replicas: 1
       restart_policy:
           condition: any
       placement:
           constraints:
             - node.labels.management==yes
       update_config:
         failure_action: rollback
       resources:
         limits:
           memory: 3GB
           cpus: "2"

    volumes:
        - elastic:/opt/elasticsearch/data


  logspout:
    image: securebrowsing/shield-logspout:latest
    networks:
        - shield
    volumes:
        - /etc/hostname:/etc/host_hostname:ro
        - /var/run/docker.sock:/var/run/docker.sock
    environment:
        - "ROUTE_URIS=logstash+tcp://elk:5025"
        - "RETRY_STARTUP=true"
#        - "DEBUG=1"
    deploy:
        mode: global
        resources:
            limits:
                cpus: '0.20'
                memory: 256M
            reservations:
                cpus: '0.10'
                memory: 128M
  consul-server:
    image: securebrowsing/shield-configuration:latest
    networks:
         - shield
    deploy:
      mode: replicated   #single node
      replicas: 5        #single node
#      mode: global       #multi node
      endpoint_mode: dnsrr
      placement:
        constraints:
            - node.labels.management==yes
      update_config:
          parallelism: 1
          failure_action: rollback
          delay: "100s"
      restart_policy:
          condition: any
      resources:
        limits:
          memory: 1GB
          cpus: "1"
    environment:
        - "CONSUL_BIND_INTERFACE=eth0"
        - "NUMBER_OF_EXPECTED=3" # works for single and multi node
        - "LOGSTASH_FIELDS=service=consulserver"
    volumes:
      - type: bind
        source: /usr/local/ericomshield/backup
        target: /consul/backup
  consul:
      image: securebrowsing/shield-consul-agent:latest
      networks:
           - shield
#      ports:
#          - "8500:8500"
      deploy:
        mode: replicated
        replicas: 1
        update_config:
            parallelism: 1
            failure_action: rollback
        restart_policy:
            condition: any
        resources:
          limits:
            memory: 1GB
            cpus: "1"
      environment:
          - "CONSUL_BIND_INTERFACE=eth0"
          - "RUN_AGENT=yes"
          - "LOGSTASH_FIELDS=service=consulclient"

###################################################################### Shield services part ##################################################################
  shield-admin:
        image: securebrowsing/shield-admin:latest
        hostname: shield-admin
        ports:
            - 8181:8181
        environment:
            - SHIELD_VER=8.0.0.latest
            - NODE_ENV=production
            - "LOGSTASH_FIELDS=service=admin"
        volumes:
           - admin:/data/consul
           - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - shield
        deploy:
            mode: replicated
            replicas: 1
            update_config: {failure_action: rollback}
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 1GB, cpus: '0.5'}}
    icap-server:
        image: 'securebrowsing/icap-server:latest'
        environment:
            - NODE_ENV=production
            - SHIELD_VER=8.0.0.latest
            - "SHIELD_IP=IP_ADDRESS"
#           - SHIELD_WATERMARK=TRUE
            - "LOGSTASH_FIELDS=service=icap"
        ulimits:
          nofile:
            soft: 65535
            hard: 65535
        networks:
            - shield
#        ports:
#            - '1344:1344'
        deploy:
            mode: replicated
            replicas: 1
            update_config: {failure_action: rollback}
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}
    shield-browser:
        image: 'securebrowsing/shield-cef:latest'
        user: user
        ulimits:
            nice: -20
            rtprio: 10
        labels:
          - com.ericom.browser
        environment:
             #- FPS=25
             #- DEBUG_REMOTE_SITE=true
             #- DISPOSE_BROWSER=true
             #- RUN_WITH_DEBUGGER=false
             #- EXTProxyAddress=
             #- DEBUG_SEND_LOG_TO_AN=true
             - SHIELD_NODE_NAME={{.Node.Hostname}}
             - SHIELD_SERVICE_NAME={{.Service.Name}}
             - PERF_STATS=true
             - "LOGSTASH_FIELDS=service=browser"
        networks:
            - shield
        deploy:
            mode: replicated
            replicas: 20
            endpoint_mode: dnsrr
            update_config: {parallelism: 8, delay: 10s}
            restart_policy: {condition: any}
            resources: {limits: {memory: 1GB, cpus: '2'}, reservations: {cpus: '0.2', memory: 150MB}}
            placement: {constraints: [node.labels.browser==yes]}
        volumes:
            - {type: tmpfs, target: /dev/shm}
            - {type: tmpfs, target: /home}
            - {type: tmpfs, target: /tmp}
            - {type: bind, target: /dev/shm/xorg, source: /media/containershm}
    es-policy-manager:
        image: 'securebrowsing/es-policy-manager:latest'
        environment:
            - TZ=UTC
            - NODE_ENV=production
            - LOGSTASH_FIELDS=service=es-policy-manager
        networks:
            - shield
        deploy:
            mode: replicated
            replicas: 2
            update_config: {failure_action: rollback}
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 500MB, cpus: '1'}}        
    es-system-configuration:
        image: 'securebrowsing/es-system-configuration:latest'
        # user: nobody
        hostname: es-system-configuration
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            resources: {limits: {memory: 100MB, cpus: '1'}, reservations: {memory: 50MB}}
            placement: {constraints: [node.labels.management==yes]}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=es-system-configuration'
            - 'SHIELD_VER=8.0.0.latest'
        networks:
            - shield
        secrets:
            - shield-system-id
    es-core-sync:
        image: 'securebrowsing/es-core-sync:latest'
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            resources: {limits: {memory: 100MB, cpus: '1'}, reservations: {memory: 50MB}}
            placement: {constraints: [node.labels.management==yes]}
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=es-core-sync'
            - 'SHIELD_VER=8.0.0.latest'
        networks:
            - shield
    es-system-monitor:
        image: 'securebrowsing/es-system-monitor:latest'
        user: root
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            resources: {limits: {memory: 100MB, cpus: '1'}, reservations: {memory: 50MB}}
            placement: {constraints: [node.labels.management==yes]}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=es-system-monitor'
            - 'SHIELD_VER=8.0.0.latest'
        networks:
            - shield
    es-license-manager:
        image: 'securebrowsing/es-license-manager:latest'
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            resources: {limits: {memory: 100MB, cpus: '1'}, reservations: {memory: 50MB}}
            placement: {constraints: [node.labels.management==yes]}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=es-license-manager'
        networks:
            - shield
        secrets:
            - shield-system-id
    es-remote-browser-scaler:
        image: 'securebrowsing/es-remote-browser-scaler:latest'
        user: root
        hostname: es-remote-browser-scaler
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            resources: {limits: {memory: 100MB, cpus: '1'}, reservations: {memory: 50MB}}
            placement: {constraints: [node.labels.management==yes]}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=es-remote-browser-scaler'
        networks:
            - shield
    proxy-server:
        image: 'securebrowsing/proxy-server:latest'
        ulimits:
          nofile:
            soft: 65535
            hard: 65535
        networks:
          - shield
        environment:
          - SSLEXCLUSION=true
          - "LOGSTASH_FIELDS=service=proxy"
        env_file: proxy-server.env
        deploy:
            mode: replicated
            replicas: 2
            restart_policy: {condition: any}
            update_config: {parallelism: 1, delay: 10s, failure_action: rollback}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}            
    ext-proxy:
        image: 'securebrowsing/extproxy:latest'
        ulimits:
            nofile: {soft: 65535, hard: 65535}
        networks:
            - shield
        deploy:
            mode: replicated
            replicas: 2
            placement: {constraints: [node.labels.browser==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}            
        environment:
            - 'TZ=UTC'
    ext-proxy-noadblock:
        image: 'securebrowsing/extproxy:latest'
        ulimits:
          nofile:
            soft: 65535
            hard: 65535
        networks:
          - shield
        deploy:
            mode: replicated
            replicas: 2
            placement: {constraints: [node.labels.browser==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}            
        environment:
            - 'TZ=UTC'
            - 'ADDBLOCK=no'
    speedtest:
        image: 'securebrowsing/speedtest:latest'
        ports:
          - "8185:8185"
        networks:
          - shield
        deploy:
            mode: replicated
            replicas: 1
            placement: {constraints: [node.labels.browser==yes]}
            resources: {limits: {memory: 512MB, cpus: '0.5'}}
        environment:
            - 'TZ=UTC'
    notifier:
        image: 'securebrowsing/shield-notifier:latest'
        networks:
          - shield
        deploy:
            mode: replicated
            replicas: 1
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 512MB, cpus: '0.5'}}
        environment:
            - 'TZ=UTC'
    authproxy:
        image: 'securebrowsing/shield-authproxy:latest'
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 2GB, cpus: '2'}}
        networks:
            - shield
        ports:
            - {target: 3128, published: "${SHIELD_PROXY_PORT}", protocol: tcp, mode: host}
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=authproxy'
    web-service:
        image: 'securebrowsing/shield-web-service:latest'
        networks:
          - shield
        environment:
            - "SHIELD_IP=IP_ADDRESS"
            - NODE_ENV=production
            - "LOGSTASH_FIELDS=service=webservice"
        deploy:
            mode: replicated
            replicas: 1
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 500MB, cpus: '1'}}
    proxyless-connector:
        image: 'securebrowsing/shield-proxyless-connector:latest'
        ports:
            - '80:80'
        networks:
            - shield
        environment:
            - 'TZ=UTC'
            - 'LOGSTASH_FIELDS=service=shield-proxyless-connector'
        deploy:
            mode: replicated
            replicas: 1
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 500MB, cpus: '2'}}
    cdr-dispatcher:
        image: 'securebrowsing/shield-cdr-dispatcher:latest'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=cdrdispatcher'
        networks:
            - shield
        deploy:
            mode: replicated
            replicas: 2
            endpoint_mode: dnsrr
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}
    cdr-controller:
        image: 'securebrowsing/shield-cdr-controller:latest'
        environment:
            - NODE_ENV=production
            - "LOGSTASH_FIELDS=service=cdrcontroller"
        networks:
            - shield
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}

    ############################### Docker managment part ##############################################################
  portainer:
        image: securebrowsing/shield-portainer:latest
        hostname: portainer
        #Published only for Dev
#        ports:
#            - '9000:9000'
        volumes:
            # - '/var/run/docker.sock:/var/run/docker.sock'
            - 'portainer_v2:/data'
        environment:
            - "LOGSTASH_FIELDS=service=portainer"
        networks:
          - shield
        deploy:
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 100MB, cpus: '0.5'}}

    portainer_agent:
        image: 'portainer/agent:1.1.2'
        environment:
            - 'AGENT_CLUSTER_ADDR=tasks.portainer_agent'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/var/lib/docker/volumes:/var/lib/docker/volumes'
        ports:
            - {target: 9001,published: 9001, protocol: tcp, mode: host}
        networks:
            - shield
        deploy:
            mode: global
            resources: {limits: {memory: 500MB, cpus: '0.5'}}

    es-file-preview:
        image: 'securebrowsing/es-file-preview:latest'
        environment:
            - 'TZ=UTC'
            - 'LOGSTASH_FIELDS=service=esfilepreview'
        networks:
            - shield
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}

volumes:
    elastic:
    portainer_v2:
    admin:

networks:
    shield:
        driver: overlay
        ipam:
            driver: default
            config: [{subnet: "${SUB_NET}"}]

secrets:
   shield-system-id:
       external: true
 